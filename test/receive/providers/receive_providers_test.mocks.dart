// Mocks generated by Mockito 5.3.1 from annotations
// in silkroad/test/receive/providers/receive_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:network_info_plus/network_info_plus.dart' as _i2;
import 'package:network_info_plus_platform_interface/network_info_plus_platform_interface.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> getWifiName() => (super.noSuchMethod(
        Invocation.method(
          #getWifiName,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getWifiBSSID() => (super.noSuchMethod(
        Invocation.method(
          #getWifiBSSID,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getWifiIP() => (super.noSuchMethod(
        Invocation.method(
          #getWifiIP,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getWifiIPv6() => (super.noSuchMethod(
        Invocation.method(
          #getWifiIPv6,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getWifiSubmask() => (super.noSuchMethod(
        Invocation.method(
          #getWifiSubmask,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getWifiGatewayIP() => (super.noSuchMethod(
        Invocation.method(
          #getWifiGatewayIP,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<String?> getWifiBroadcast() => (super.noSuchMethod(
        Invocation.method(
          #getWifiBroadcast,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<_i4.LocationAuthorizationStatus>
      requestLocationServiceAuthorization(
              {bool? requestAlwaysLocationUsage = false}) =>
          (super.noSuchMethod(
            Invocation.method(
              #requestLocationServiceAuthorization,
              [],
              {#requestAlwaysLocationUsage: requestAlwaysLocationUsage},
            ),
            returnValue: _i3.Future<_i4.LocationAuthorizationStatus>.value(
                _i4.LocationAuthorizationStatus.notDetermined),
          ) as _i3.Future<_i4.LocationAuthorizationStatus>);
  @override
  _i3.Future<_i4.LocationAuthorizationStatus>
      getLocationServiceAuthorization() => (super.noSuchMethod(
            Invocation.method(
              #getLocationServiceAuthorization,
              [],
            ),
            returnValue: _i3.Future<_i4.LocationAuthorizationStatus>.value(
                _i4.LocationAuthorizationStatus.notDetermined),
          ) as _i3.Future<_i4.LocationAuthorizationStatus>);
}
